Ricordiamo che:
    LinkedList contiene il solo riferimento alla testa della lista 
    LinkedListWithTail contiene sia il riferimento alla testa che quello alla coda

A) restituisci 1 se la lista contiene un dato elemento 
Possiamo avere 3 casi:
    -elemento in testa alla lista: per entrambe le implementazioni il tempo è O(1) usando l'accesso diretto mediante il puntatore a head 
    -elemento in coda alla lista: con LinkedList bisogna scandire l'intera lista, quindi tempo O(n), mentre con LinkedListWithTail il tempo diventa O(1) grazie al puntatore tail 
    -elemento in una qualunque posizione non in cima o in fondo alla lista: le prestazioni sono simili, con un tempo di O(n) nel caso peggiore (anche per LinkedListWithTail)

B) cancella l'ultimo elemento della lista 
    -LinkedList: bisogna scorrere l'intera lista per poi cancellare il riferimento al nodo in coda alla lista -> tempo O(n)
    -LinkedListWithTail: accesso diretto alla coda mediante il puntatore tail -> tempo O(1) per modificare un numero costante di puntatori

C) aggiungi un elemento all'inizio della lista 
Per entrambe le implementazioni il tempo è O(1) per modificare un numero costante di puntatori 

D) aggiungi un elemento alla fine della lista
    -LinkedList: bisogna scorrere l'intera lista per poi creare il riferimento al nuovo nodo e attaccarlo in coda alla lista -> tempo O(n)
    -LinkedListWithTail: accesso diretto alla coda mediante il puntatore tail -> tempo O(1) per modificare un numero costante di puntatori e creare il riferimento al nuovo nodo 
