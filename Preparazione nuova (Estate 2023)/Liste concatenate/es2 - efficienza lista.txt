Nell'esercizio 2, abbiamo implementato un insieme di interi mediante una lista concatenata. Di tale lista si memorizza un puntatore alla testa e tutti gli inserimenti avvengono in testa. Valutiamo le complessità di ogni operazione: 
    -inserisci elemento: l'inserimento avviene in testa, per cui serve tempo O(1) per aggiornare un numero costante di puntatori. Anche la creazione del nuovo nodo richiede tempo O(1), per un tempo totale di O(1)
    -rimovi elemento: se l'elemento da rimuovere si trova in testa alla lista, tale operazione richiede tempo O(1). Altrimenti, nel caso peggiore si deve scorrere tutta la lista (elemento da cancellare in fondo oppure non presente): in tal caso, il tempo diventa O(n) con n = cardinalità lista 
    -cerca elemento: come per rimuovi elemento, se l'elemento è in testa richiede tempo O(1), se invece si trova in fondo o non è presente richiede tempo O(n) 
    -cardinalità: è stata implementata contando uno ad uno gli elementi della lista. Richiede quindi tempo O(n) per scandire l'intera lista 
    -stampa lista: bisogna scorrere tutta la lista, quindi tempo O(n)
    -stampa inversa: 
    -cancella tutti gli elementi dell'insieme: dato che Go ha il garbage collector, basta cancellare il riferimento alla testa della lista per rimuovere tutti i riferimenti agli altri nodi. Bisogna quindi modificare un numero costante di puntatori, quindi tempo O(1) 

Alcune di queste operazioni potrebbero essere implementate in modo più efficiente, modificando la struttura della lista. In particolare:
    -cardinalità: si potrebbe aggiungere un campo int "card" che, ogni volta che viene inserito un elemento viene incrementato e ogni volta che se ne toglie uno viene decrementato. In questo modo, per sapere la cardinalità dell'insieme si può accedere direttamente a tale campo senza scandire l'intera lista: in questo modo il tempo si abbassa a O(1)
    -stampa inversa: si potrebbe aggiungere un riferimento alla coda della lista, che viene opportunamente aggiornata ad ogni inserimento e/o cancellazione dalla lista: in questo modo si evita di fare una doppia scansione della lista, ma il tempo rimane O(n) 
    